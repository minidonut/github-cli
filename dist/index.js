#!/usr/bin/env node
!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function s(e){try{u(o.next(e))}catch(e){r(e)}}function c(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}u((o=o.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(1)),s=i(n(2)),c=i(n(3)),u=i(n(4)),a=n(5),l=n(6)(),d=n(7).version,f={origin:"",upstream:"",name:""},p=()=>o(void 0,void 0,void 0,(function*(){return new Promise(e=>{if(f.name)e(f);else{const t=/^git@github.com:(.*)\/(.*).git$/;l.getRemotes(!0,(n,o)=>{var i,r;n&&process.exit(5);const s=t.exec(null===(i=o.find(e=>"origin"===e.name))||void 0===i?void 0:i.refs.push);s||(console.log("Origin is not set"),process.exit(1)),f.origin=s[1],f.name=s[2];const c=t.exec(null===(r=o.find(e=>"upstream"===e.name))||void 0===r?void 0:r.refs.push);c||(console.log("Upstream is not set"),process.exit(1)),f.upstream=c[1],e(f)})}})})),m=()=>o(void 0,void 0,void 0,(function*(){const e=c.default("get current branch name...").start();return new Promise(t=>{l.branch([],(n,o)=>{n?(e.fail(),process.exit(1)):(e.text="get current branch name... "+a.yellow(o.current),e.succeed(),t(o.current))})})})),v=e=>o(void 0,void 0,void 0,(function*(){const t=c.default("git push origin "+a.yellow(e)).start();return new Promise(n=>{l.push(["origin",e],(e,o)=>{e?(t.fail(),process.exit(2)):(t.succeed(),n(o))})})}));s.default.version(d,"-v, --version").command("yay").description("Yay!").action(()=>o(void 0,void 0,void 0,(function*(){const e=yield m(),t=yield(e=>o(void 0,void 0,void 0,(function*(){const t=c.default("get jira issue of id "+a.yellow(e)).start(),n=yield r.default("jira",["show","-s",e]);if(!n.failed&&0===n.exitCode)return t.succeed(),console.log("└─",n.stdout),n.stdout;t.fail(),console.log("Cannot find jira issue of id:",a.yellow(e)),process.exit(3)})))(e);yield v(e);const n=new u.default({auth:process.env.GITHUB_ACCESS_TOKEN,userAgent:`github-cli v${d}`,previews:["jean-grey","symmetra"],timeZone:"Asia/Seoul",baseUrl:"https://api.github.com",log:{debug:()=>{},info:()=>{},warn:console.warn,error:console.error}}),i=yield p(),s=yield((e,t,n,i,r="dev")=>o(void 0,void 0,void 0,(function*(){const o=c.default(`Generate pull request of [${a.yellow(t.name)}] ${t.origin}/${n} -> ${t.upstream}/${r}`).start();try{const s=yield e.pulls.create({owner:t.upstream,repo:t.name,title:`[${n}] ${i}`,head:`${t.origin}:${n}`,base:r});return o.succeed(),s.data}catch(e){console.log("Cannot make pull request",e),o.fail(),process.exit(1)}})))(n,i,e,t);console.log(s.html_url),console.log(s.url)}))),s.default.command("push").description("list issues").action(()=>o(void 0,void 0,void 0,(function*(){const e=yield m();yield v(e)}))),s.default.on("--help",(function(){console.log("Examples:")})),s.default.parse(process.argv)},function(e,t){e.exports=require("execa")},function(e,t){e.exports=require("commander")},function(e,t){e.exports=require("ora")},function(e,t){e.exports=require("@octokit/rest")},function(e,t){e.exports=require("chalk")},function(e,t){e.exports=require("simple-git")},function(e){e.exports=JSON.parse('{"name":"@minidonut/github-cli","version":"1.0.0","main":"dist/index.js","license":"MIT","scripts":{"dev":"nodemon --watch \'src/**/*\' -e ts,tsx --exec \'ts-node --files\' src/index.ts","start":"ts-node --files src/index.ts","build":"NODE_ENV=production webpack","clean":"rm -rf dist"},"devDependencies":{"@types/inquirer":"^6.0.3","@types/node":"^12.0.10","@types/ramda":"^0.26.9","nodemon":"^1.19.1","ts-loader":"^6.0.4","tslint":"^5.18.0","typescript":"^3.7.2","webpack":"^4.35.0","webpack-cli":"^3.3.4","webpack-node-externals":"^1.7.2"},"dependencies":{"@octokit/rest":"^16.34.1","@types/node-fetch":"^2.5.3","axios":"^0.19.0","chalk":"^2.4.2","cli-spinners":"^2.2.0","commander":"^2.20.0","date-fns":"^1.30.1","execa":"^3.2.0","inquirer":"^6.4.1","node-fetch":"^2.6.0","ora":"^4.0.2","ramda":"^0.26.1","simple-git":"^1.126.0","ts-node":"^8.4.1"},"bin":{"github":"dist/index.js"},"files":["dist"]}')}]);