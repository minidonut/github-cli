#!/usr/bin/env node
!function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";var i=this&&this.__awaiter||function(e,t,o,i){return new(o||(o=Promise))((function(n,r){function s(e){try{d(i.next(e))}catch(e){r(e)}}function l(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,l)}d((i=i.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const s=n(o(1)),l=n(o(2)),d=n(o(3)),c=r(o(4)),a=o(5),u=n(o(6)),f=o(7),p=o(8)(),m=o(9).version,v={origin:"",upstream:"",name:""};let y="";const g=()=>i(void 0,void 0,void 0,(function*(){return new Promise(e=>{if(v.name)e(v);else{const t=/^git@github.com:(.*)\/(.*).git$/;p.getRemotes(!0,(o,i)=>{var n,r;o&&process.exit(5);const s=t.exec(null===(n=i.find(e=>"origin"===e.name))||void 0===n?void 0:n.refs.push);s||(console.log("Origin is not set"),process.exit(1)),v.origin=s[1],v.name=s[2];const l=t.exec(null===(r=i.find(e=>"upstream"===e.name))||void 0===r?void 0:r.refs.push);l||(console.log("Upstream is not set"),process.exit(1)),v.upstream=l[1],e(v)})}})})),h=()=>{return new u.default({auth:process.env.GITHUB_ACCESS_TOKEN,userAgent:`github-cli v${m}`,previews:["jean-grey","symmetra"],timeZone:"Asia/Seoul",baseUrl:"https://api.github.com",log:{debug:()=>{},info:()=>{},warn:console.warn,error:console.error}})},x=()=>i(void 0,void 0,void 0,(function*(){const e=d.default("get current branch name...").start();return new Promise(t=>{p.branch([],(o,i)=>{o?(e.fail(),process.exit(1)):(e.text="get current branch name... "+f.yellow(i.current),e.succeed(),t(i.current))})})})),b=(e,t,o)=>i(void 0,void 0,void 0,(function*(){const i=d.default(`Delete [${f.yellow(t.name)}] ${t.origin}/${o}`).start();try{const n=yield e.git.deleteRef({owner:t.origin,repo:t.name,ref:o});return i.succeed(),n.data}catch(e){i.fail(),console.log("Fail to delete branch",o)}})),w=(e,t,o)=>i(void 0,void 0,void 0,(function*(){const i=(yield e.pulls.list({owner:o.upstream,repo:o.name})).data.find(e=>e.head.ref===t);if(i)return i;console.error(`Cannot find any pull request of [${o.name}] ${o.origin}/${t} -> ${o.upstream}/...`),process.exit(1)})),_=(e,t,o)=>i(void 0,void 0,void 0,(function*(){return new Promise(n=>{const r=setInterval(()=>i(void 0,void 0,void 0,(function*(){const s=yield((e,t,o)=>i(void 0,void 0,void 0,(function*(){return(yield e.pulls.get({owner:t.upstream,repo:t.name,pull_number:o})).data})))(e,t,o);console.log("- get mergeable status:",s.mergeable),null!==s.mergeable&&(!1===s.mergeable?(console.error("Cannot be merged. check\n",s.html_url),process.exit(1)):(clearInterval(r),n(!0)))})),3e3)})})),$=(e,t,o,n)=>i(void 0,void 0,void 0,(function*(){return new Promise(r=>{const s=d.default("[CircleCI]").start(),l=setInterval(()=>i(void 0,void 0,void 0,(function*(){const d=yield((e,t,o)=>i(void 0,void 0,void 0,(function*(){return(yield e.repos.getCombinedStatusForRef({owner:t.upstream,repo:t.name,ref:o})).data})))(e,t,o),c=d.state;s.text="[CircleCI] "+(e=>e.map(({context:e,state:t})=>f["pending"===t?"yellow":"success"===t?"green":"red"](e.replace(/ci\/circleci./,"").trim())).join(" "))(d.statuses),"pending"!==c&&("failure"===c?(s.fail(),console.error("CirclCI failed. check\n",n),process.exit(1)):(clearInterval(l),s.succeed(),r(!0)))})),3e3)})})),j=()=>i(void 0,void 0,void 0,(function*(){const e=yield s.default("jira",["ls","todo","karl"]);y=e.stdout})),q=(e,t,o)=>i(void 0,void 0,void 0,(function*(){const i=d.default("Delete jira issue of id "+f.yellow(t)).start(),n=yield s.default("jira",["rm",t,"-y"]);n.failed||0!==n.exitCode?(i.fail(),console.log("Cannot delete jira issue of id:",f.yellow(t)),process.exit(3)):(i.succeed(),yield Promise.all([s.default("gitreturn"),b(e,v,"heads/"+t),j()]),console.log(y),console.log("Take a rest.."),a.notify({title:"Hou!!! All compeletee",message:`[${t}] ${o}`,sound:!0,wait:!0,timeout:10}),process.exit(0))})),C=()=>i(void 0,void 0,void 0,(function*(){const e=yield x(),t=yield g(),o=yield(e=>i(void 0,void 0,void 0,(function*(){const t=d.default("get jira issue of id "+f.yellow(e)).start(),o=yield s.default("jira",["show","-s",e]);if(!o.failed&&0===o.exitCode)return t.succeed(),console.log("└─",o.stdout),o.stdout;t.fail(),console.log("Cannot find jira issue of id:",f.yellow(e)),process.exit(3)})))(e),n=h();yield(e=>i(void 0,void 0,void 0,(function*(){const t=d.default("git push origin "+f.yellow(e)).start();return new Promise(o=>{p.push(["origin",e],(e,i)=>{e?(t.fail(),process.exit(2)):(t.succeed(),o(i))})})})))(e);const r=yield((e,t,o,n,r="dev")=>i(void 0,void 0,void 0,(function*(){const i=d.default(`Generate pull request of [${f.yellow(t.name)}] ${t.origin}/${o} -> ${t.upstream}/${r}`).start();try{const s=yield e.pulls.create({owner:t.upstream,repo:t.name,title:`[${o}] ${n}`,head:`${t.origin}:${o}`,base:r});return i.succeed(),s.data}catch(e){console.log("Cannot make pull request",e),i.fail(),process.exit(1)}})))(n,t,e,o);return console.log(r.html_url),console.log(r.url),a.notify({title:"Yo, PullRequest created",message:`[${e}] ${o}`,sound:!0,wait:!0,timeout:10}),e})),k=e=>i(void 0,void 0,void 0,(function*(){const t="string"==typeof e?e:yield x(),o=yield g(),i=h(),n=yield w(i,t,o);yield _(i,o,n.number),yield $(i,o,n.head.sha,n.html_url),a.notify({title:"Ho! All check is passed. you can merge now",message:`[${t}] ${n.title}`,sound:!0,wait:!0,timeout:10})})),P=e=>i(void 0,void 0,void 0,(function*(){const t=yield x(),o="string"!=typeof e,n=yield g(),r=h(),s=yield w(r,t,n);yield((e,t,o,n,r="squash")=>i(void 0,void 0,void 0,(function*(){return(yield e.pulls.merge({owner:t.upstream,repo:t.name,pull_number:o,commit_title:n,merge_method:r})).data})))(r,n,s.number,s.title),console.log(`Branch ${f.yellow(t)} is successfully merged! Yohohou!`),o?c.prompt({type:"confirm",message:"Delete JIRA issue and git branch ?",name:"yes"}).then(({yes:e})=>i(void 0,void 0,void 0,(function*(){e?q(r,t,s.title):console.log("Take a rest..")}))):q(r,t,s.title)}));l.default.version(m,"-v, --version").command("yo").description("Yo!, create pull request").action(C),l.default.command("ho").description("Ho!, wait pull request mergeable").action(k),l.default.command("hou").description("Hou!, merge!").action(P),l.default.command("yohohou").description("Yo, Ho! Hou!!, create, merge, delete").action(()=>i(void 0,void 0,void 0,(function*(){const e=yield C();yield k(e),yield P(e)}))),l.default.on("--help",(function(){console.log("Examples:")})),l.default.parse(process.argv)},function(e,t){e.exports=require("execa")},function(e,t){e.exports=require("commander")},function(e,t){e.exports=require("ora")},function(e,t){e.exports=require("inquirer")},function(e,t){e.exports=require("node-notifier")},function(e,t){e.exports=require("@octokit/rest")},function(e,t){e.exports=require("chalk")},function(e,t){e.exports=require("simple-git")},function(e){e.exports=JSON.parse('{"name":"@minidonut/github-cli","version":"1.0.0","main":"dist/index.js","license":"MIT","scripts":{"dev":"nodemon --watch \'src/**/*\' -e ts,tsx --exec \'ts-node --files\' src/index.ts","start":"ts-node --files src/index.ts","build":"NODE_ENV=production webpack","clean":"rm -rf dist"},"devDependencies":{"@types/inquirer":"^6.0.3","@types/node":"^12.0.10","@types/node-notifier":"^5.4.0","@types/ramda":"^0.26.9","nodemon":"^1.19.1","ts-loader":"^6.0.4","tslint":"^5.18.0","typescript":"^3.7.2","webpack":"^4.35.0","webpack-cli":"^3.3.4","webpack-node-externals":"^1.7.2"},"dependencies":{"@octokit/rest":"^16.34.1","@types/node-fetch":"^2.5.3","axios":"^0.19.0","chalk":"^2.4.2","cli-spinners":"^2.2.0","commander":"^2.20.0","date-fns":"^1.30.1","execa":"^3.2.0","inquirer":"^6.4.1","node-fetch":"^2.6.0","node-notifier":"^6.0.0","ora":"^4.0.2","ramda":"^0.26.1","simple-git":"^1.126.0","ts-node":"^8.4.1"},"bin":{"github":"dist/index.js"},"files":["dist"]}')}]);