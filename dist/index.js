#!/usr/bin/env node
!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(i,r){function s(e){try{c(n.next(e))}catch(e){r(e)}}function l(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,l)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const s=i(o(1)),l=i(o(2)),c=i(o(3)),a=r(o(4)),d=i(o(5)),u=o(6),f=o(7)(),p=o(8).version,m={origin:"",upstream:"",name:""};let v="";const g=()=>n(void 0,void 0,void 0,(function*(){return new Promise(e=>{if(m.name)e(m);else{const t=/^git@github.com:(.*)\/(.*).git$/;f.getRemotes(!0,(o,n)=>{var i,r;o&&process.exit(5);const s=t.exec(null===(i=n.find(e=>"origin"===e.name))||void 0===i?void 0:i.refs.push);s||(console.log("Origin is not set"),process.exit(1)),m.origin=s[1],m.name=s[2];const l=t.exec(null===(r=n.find(e=>"upstream"===e.name))||void 0===r?void 0:r.refs.push);l||(console.log("Upstream is not set"),process.exit(1)),m.upstream=l[1],e(m)})}})})),y=()=>{return new d.default({auth:process.env.GITHUB_ACCESS_TOKEN,userAgent:`github-cli v${p}`,previews:["jean-grey","symmetra"],timeZone:"Asia/Seoul",baseUrl:"https://api.github.com",log:{debug:()=>{},info:()=>{},warn:console.warn,error:console.error}})},h=()=>n(void 0,void 0,void 0,(function*(){const e=c.default("get current branch name...").start();return new Promise(t=>{f.branch([],(o,n)=>{o?(e.fail(),process.exit(1)):(e.text="get current branch name... "+u.yellow(n.current),e.succeed(),t(n.current))})})})),x=(e,t,o)=>n(void 0,void 0,void 0,(function*(){const n=c.default(`Delete [${u.yellow(t.name)}] ${t.origin}/${o}`).start();try{const i=yield e.git.deleteRef({owner:t.origin,repo:t.name,ref:o});return n.succeed(),i.data}catch(e){console.log("Fail to delete repository",o),n.fail()}})),b=(e,t,o)=>n(void 0,void 0,void 0,(function*(){const n=(yield e.pulls.list({owner:o.upstream,repo:o.name})).data.find(e=>e.head.ref===t);if(n)return n;console.error(`Cannot find any pull request of [${o.name}] ${o.origin}/${t} -> ${o.upstream}/...`),process.exit(1)})),w=(e,t,o)=>n(void 0,void 0,void 0,(function*(){return new Promise(i=>{const r=setInterval(()=>n(void 0,void 0,void 0,(function*(){const s=yield((e,t,o)=>n(void 0,void 0,void 0,(function*(){return(yield e.pulls.get({owner:t.upstream,repo:t.name,pull_number:o})).data})))(e,t,o);console.log("- get mergeable status:",s.mergeable),null!==s.mergeable&&(!1===s.mergeable?(console.error("Cannot be merged. check\n",s.html_url),process.exit(1)):(clearInterval(r),i(!0)))})),3e3)})})),_=(e,t,o,i)=>n(void 0,void 0,void 0,(function*(){return new Promise(r=>{const s=c.default("[CircleCI]").start(),l=setInterval(()=>n(void 0,void 0,void 0,(function*(){const c=yield((e,t,o)=>n(void 0,void 0,void 0,(function*(){return(yield e.repos.getCombinedStatusForRef({owner:t.upstream,repo:t.name,ref:o})).data})))(e,t,o),a=c.state;s.text="[CircleCI] "+(e=>e.map(({context:e,state:t})=>u["pending"===t?"yellow":"success"===t?"green":"red"](e.replace(/ci\/circleci./,"").trim())).join(" "))(c.statuses),"pending"!==a&&("failure"===a?(s.fail(),console.error("CirclCI failed. check\n",i),process.exit(1)):(clearInterval(l),s.succeed(),r(!0)))})),3e3)})})),j=()=>n(void 0,void 0,void 0,(function*(){const e=yield s.default("jira",["ls","todo","karl"]);v=e.stdout}));l.default.version(p,"-v, --version").command("yo").description("Yo!, create pull request").action(()=>n(void 0,void 0,void 0,(function*(){const e=yield h(),t=yield g(),o=yield(e=>n(void 0,void 0,void 0,(function*(){const t=c.default("get jira issue of id "+u.yellow(e)).start(),o=yield s.default("jira",["show","-s",e]);if(!o.failed&&0===o.exitCode)return t.succeed(),console.log("└─",o.stdout),o.stdout;t.fail(),console.log("Cannot find jira issue of id:",u.yellow(e)),process.exit(3)})))(e),i=y();yield(e=>n(void 0,void 0,void 0,(function*(){const t=c.default("git push origin "+u.yellow(e)).start();return new Promise(o=>{f.push(["origin",e],(e,n)=>{e?(t.fail(),process.exit(2)):(t.succeed(),o(n))})})})))(e);const r=yield((e,t,o,i,r="dev")=>n(void 0,void 0,void 0,(function*(){const n=c.default(`Generate pull request of [${u.yellow(t.name)}] ${t.origin}/${o} -> ${t.upstream}/${r}`).start();try{const s=yield e.pulls.create({owner:t.upstream,repo:t.name,title:`[${o}] ${i}`,head:`${t.origin}:${o}`,base:r});return n.succeed(),s.data}catch(e){console.log("Cannot make pull request",e),n.fail(),process.exit(1)}})))(i,t,e,o);console.log(r.html_url),console.log(r.url)}))),l.default.command("ho").description("Ho!, wait pull request mergeable").action(e=>n(void 0,void 0,void 0,(function*(){const t="string"==typeof e?e:yield h(),o=yield g(),n=y(),i=yield b(n,t,o);yield w(n,o,i.number),yield _(n,o,i.head.sha,i.html_url)}))),l.default.command("hou").description("Hou!, merge!").action(e=>n(void 0,void 0,void 0,(function*(){const t="string"==typeof e?e:yield h(),o=yield g(),i=y(),r=yield b(i,t,o);yield((e,t,o,i,r="squash")=>n(void 0,void 0,void 0,(function*(){return(yield e.pulls.merge({owner:t.upstream,repo:t.name,pull_number:o,commit_title:i,merge_method:r})).data})))(i,o,r.number,r.title),console.log(`Branch ${u.yellow(t)} is successfully merged! Yohohou!`),a.prompt({type:"confirm",message:"Delete JIRA issue and git branch ?",name:"yes"}).then(({yes:e})=>n(void 0,void 0,void 0,(function*(){if(e){const e=c.default("Delete jira issue of id "+u.yellow(t)).start(),n=yield s.default("jira",["show","-s",t]);n.failed||0!==n.exitCode?(e.fail(),console.log("Cannot delete jira issue of id:",u.yellow(t)),process.exit(3)):(e.succeed(),yield Promise.all([s.default("gitreturn"),x(i,o,t),j()]),console.log(v),console.log("Take a rest.."),process.exit(0))}else console.log("Take a rest..")})))}))),l.default.on("--help",(function(){console.log("Examples:")})),l.default.parse(process.argv)},function(e,t){e.exports=require("execa")},function(e,t){e.exports=require("commander")},function(e,t){e.exports=require("ora")},function(e,t){e.exports=require("inquirer")},function(e,t){e.exports=require("@octokit/rest")},function(e,t){e.exports=require("chalk")},function(e,t){e.exports=require("simple-git")},function(e){e.exports=JSON.parse('{"name":"@minidonut/github-cli","version":"1.0.0","main":"dist/index.js","license":"MIT","scripts":{"dev":"nodemon --watch \'src/**/*\' -e ts,tsx --exec \'ts-node --files\' src/index.ts","start":"ts-node --files src/index.ts","build":"NODE_ENV=production webpack","clean":"rm -rf dist"},"devDependencies":{"@types/inquirer":"^6.0.3","@types/node":"^12.0.10","@types/ramda":"^0.26.9","nodemon":"^1.19.1","ts-loader":"^6.0.4","tslint":"^5.18.0","typescript":"^3.7.2","webpack":"^4.35.0","webpack-cli":"^3.3.4","webpack-node-externals":"^1.7.2"},"dependencies":{"@octokit/rest":"^16.34.1","@types/node-fetch":"^2.5.3","axios":"^0.19.0","chalk":"^2.4.2","cli-spinners":"^2.2.0","commander":"^2.20.0","date-fns":"^1.30.1","execa":"^3.2.0","inquirer":"^6.4.1","node-fetch":"^2.6.0","ora":"^4.0.2","ramda":"^0.26.1","simple-git":"^1.126.0","ts-node":"^8.4.1"},"bin":{"github":"dist/index.js"},"files":["dist"]}')}]);